import com.modrinth.minotaur.TaskModrinthUpload
import net.fabricmc.loom.task.RemapJarTask

import java.time.Year

plugins {
    id 'fabric-loom' version '0.4-SNAPSHOT'
    id "net.minecrell.licenser" version "0.4.1"
    id 'com.matthewprenger.cursegradle' version '1.4.0'
    id "com.jfrog.bintray" version '1.8.4'
    id 'org.ajoberstar.grgit' version '3.1.1'
    id 'com.github.breadmoirai.github-release' version '2.2.9'
    id 'com.modrinth.minotaur' version '1.1.0'
    id 'java-library'
    id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

sourceSets {
    testmod {
        compileClasspath += main.compileClasspath
        runtimeClasspath += main.runtimeClasspath
    }
}

minecraft {
}

repositories {
    maven {
        name = "Ladysnake Libs"
        url = 'https://dl.bintray.com/ladysnake/libs'
    }
}

dependencies {
    //to change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    modApi "io.github.onyxstudios.Cardinal-Components-API:cardinal-components-base:${cca_version}"
    modImplementation "io.github.onyxstudios.Cardinal-Components-API:cardinal-components-entity:${cca_version}"
    include "io.github.onyxstudios.Cardinal-Components-API:cardinal-components-base:${cca_version}"
    include "io.github.onyxstudios.Cardinal-Components-API:cardinal-components-entity:${cca_version}"

    api "org.jetbrains:annotations:${jb_annotations_version}"
    api "org.apiguardian:apiguardian-api:${apiguardian_version}"

    testmodCompile sourceSets.main.output
}

processResources {
    inputs.property "version", project.version

    from(sourceSets.main.resources.srcDirs) {
        include "fabric.mod.json"
        expand "version": project.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude "fabric.mod.json"
    }
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier = "sources"
    from sourceSets.main.allSource
}

task testmodJar(type: Jar, dependsOn: testmodClasses) {
    archiveBaseName = 'PalTest'
    archiveClassifier = 'dev'
    from(sourceSets.testmod.output) {
        include 'fabric.mod.json'
        expand 'version': project.version
    }
    from(sourceSets.testmod.output) {
        exclude 'fabric.mod.json'
    }
}

task remapTestmodJar(type: RemapJarTask, dependsOn: project.testmodJar) {
    archiveBaseName = 'ImpersonateTest'
    input = testmodJar.archiveFile
    addNestedDependencies = false
}

task remapLibJar(type: RemapJarTask, dependsOn: project.jar) {
    classifier = 'lib'
    input = jar.archiveFile
    addNestedDependencies = false
}

build.dependsOn(remapTestmodJar)
build.dependsOn(remapLibJar)

license {
    header = rootProject.file("code_quality/${project.license_header}_HEADER.txt")

    // Apply licenses only to main source set
    sourceSets = [project.sourceSets.main]
    include "**/*.java"
    exclude '**/PlayerSkins.java'

    newLine = false // Disables the empty line between the header and package name
    //ignoreFailures = true //Ignore failures and only print a warning on license violations

    //export variables
    ext {
        year = Year.now()
        projectDisplayName = project.name
        projectOwners = rootProject.owners
        if (project.license_header.contains('GPL')) {
            if (!project.hasProperty("gpl_version")) {
                throw new RuntimeException("GPL version needs to be specified through the 'gpl_version' property")
            }
            gplVersion = project.gpl_version
        }
    }
}

apply from: 'release.gradle'

task modrinth (type: TaskModrinthUpload, dependsOn: checkGitStatus){
    if (project.hasProperty('modrinth_key') != null) {
        token = project.findProperty('modrinth_key')
    }
    projectId = findProperty("modrinth_id")
    versionNumber = project.version
    uploadFile = remapJar
    subprojects {
        addFile(remapJar)
    }
    changelog = project.getChangelogText()
    "${project.curseforge_versions}".split('; ').each {
        addGameVersion it
    }
    addLoader('fabric')
}

task release(dependsOn: [tasks.publish, tasks.githubRelease, tasks.bintrayUpload, tasks.curseforge, tasks.modrinth]) {
    group = 'publishing'
    description = 'Releases a new version to Maven, Github and Curseforge'
}
