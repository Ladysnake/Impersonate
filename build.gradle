import net.fabricmc.loom.task.RemapJarTask

plugins {
    id 'fabric-loom' version '1.+'
    id 'io.github.ladysnake.chenille' version '0.9.0'
    id 'io.github.juuxel.loom-quiltflower' version "1.6.0"
}

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

chenille {
    configureTestmod {
        withBaseTestRuns()
        withDependencyConfiguration()
    }

    license = project.license_header
    javaVersion = 17
}

repositories {
    chenille.repositories {
        ladysnake()
        lucko()
        cursemaven()
    }
    mavenLocal()
}

dependencies {
    //to change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    modIncludeImplementation libs.fpa
    modIncludeApi libs.cca.base
    modIncludeImplementation libs.cca.entity
    // TODO make it work with effective once released
    modCompileOnly (compatLibs.illuminations) {
        exclude group: 'me.shedaniel.cloth'
    }
    modLocalImplementation libs.elmendorf

    api "org.jetbrains:annotations:${jb_annotations_version}"
    api "org.apiguardian:apiguardian-api:${apiguardian_version}"

    testmodImplementation sourceSets.main.output
}

java {
    withSourcesJar()
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

task testmodJar(type: Jar, dependsOn: testmodClasses) {
    archiveBaseName = 'ImpersonateTest'
    archiveClassifier = 'dev'
    from(sourceSets.testmod.output) {
        include 'fabric.mod.json'
        expand 'version': project.version
    }
    from(sourceSets.testmod.output) {
        exclude 'fabric.mod.json'
    }
}

task remapTestmodJar(type: RemapJarTask, dependsOn: project.testmodJar) {
    archiveBaseName = 'ImpersonateTest'
    inputFile = testmodJar.archiveFile
    addNestedDependencies = false
}

build.dependsOn(remapTestmodJar)

remapJar {
    addNestedDependencies.set(false)
}

task standaloneJar(type: Jar, dependsOn: project.classes) {
    from sourceSets.main.output
    archiveClassifier.set('standalone-dev')
}

task remapStandaloneJar(type: RemapJarTask, dependsOn: project.standaloneJar) {
    archiveClassifier.set('standalone')
    inputFile.set(standaloneJar.archiveFile)
    addNestedDependencies.set(true)
}

assemble.dependsOn(remapStandaloneJar)

chenille {
    configurePublishing {
        mainArtifact = remapStandaloneJar.archiveFile
        withArtifactory()
        withCurseforgeRelease()
        withGithubRelease()
        withModrinthRelease()
    }
}
